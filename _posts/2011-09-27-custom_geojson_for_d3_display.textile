---
published: false
layout: post
title: Custom geoJSON from Census Shapefiles for D3
categories:
- vis
---

h3. A method for modifying and converting Shapefiles to geoJSON to display using D3

"D3.js":http://mbostock.github.com/d3/ supports cartographic visualizations by being able to display "lines, polygons, and other geometry objects":https://github.com/mbostock/d3/wiki/Geo-Paths . Some example geoJSON files are provided for the entire US, but sooner or later you will want to visualize a more specific portion of the world.

Specifically, I am interested in visualizing census data for my hometown: Kansas City. Kansas City is perhaps a bit unusual, from a census point of view, as it is actually two cities in two different states: "Kansas":http://en.wikipedia.org/wiki/Kansas_City,_Kansas , and "Missouri":http://en.wikipedia.org/wiki/Kansas_City,_Missouri . Also, I'm not really interested in the rest of these states - just the Kansas City metro area. 

Below is how I created a small geoJSON file of just the KC metro from census shapefiles. 

<div class="box">
*WARNING:* I am not an expert in "GIS":http://en.wikipedia.org/wiki/Geographic_information_system or cartography in general. This may not be the best way to get a custom geoJSON. In fact, cutting up shapefiles into custom geoJSON files might not even be a good idea in the first place. However, if you want to look at small piece of the world in d3, this might be a way to start. 
</div>

h3. Tools

I'm using a mix of different applications to perform this conversion:
* "Quantum GIS":http://www.qgis.org/ is used to deal with shapefiles. I didn't have any luck with installing this on my Mac (though I didn't try very hard), so I used a copy installed on a Windows XP machine. 
* "GDAL":http://www.gdal.org/ is used to convert shapefiles to geoJSON. I was able to install this on my Mac using homebrew:

<pre class="terminal"><code>brew install gdal</code></pre>

h3. Getting the Data

"Census.ire.org":http://census.ire.org/data/bulkdata.html provides a way to download census 2010 data, including shapefiles of the tracts / counties the data is for. I downloaded Shapefiles for Kansas and Missouri at the *Census Tract* Summary Level. The files together are over 10MB in size, and transforming them into geoJSON at this stage creates over 30MB of data - too much to render in the browser all at once. Certainly there are more sophisticated ways to deal with this issue, but for the time, I just want to explore some KC data quickly.

h3. Merging Shapefiles

Open up Quantum GIS and select Add Vector Layer as shown below:

!images/gis/02_qgis_gui_small.png!:images/gis/02_qgis_gui.png

Click *Browse* under Source and select your Shapefile. Repeat if you have multiple shape files. Here's Mine with both Kansas and Missouri open:

!images/gis/04_qgis_ks_and_mo_small.png!:images/gis/04_qgis_ks_and_mo.png

Merging these layers was tricky (for me). I ended up needing the "MMQGIS":http://michaelminn.com/linux/mmqgis/ plugin for merging. To install this, first select Plugins -> Fetch Python Plugins. In the Repositories tab, I selected *Add 3rd party repositories*. When it adds the plugin repositories, it seems to get stuck on one of them. Clicking *Abort* will let you continue without this repo. In the plugins tab, search for MMQGIS, select it, and then click *Install plugin*. Then you should be good to go.

With this plugin installed, you will have a new menu item under Plugins called *mmqgis*. Navigate here, then select *Merge Layers*:

!images/gis/07_qgis_merge_layers_small.png!:images/gis/07_qgis_merge_layers.png

Select the Shapefile layers you want to merge then select a location to save the merged Shapefile. After this, you should have an additional Shapefile with all the geometry from your multiple Shapefiles in one file. 

h3. Selecting a Portion of Shapefile

Ok, maybe your region doesn't exist in multiple Shapefiles, but some times you don't want to deal with an entire state's worth of data with visualizing. Use the "Select features by rectangle" tool to highlight the portion of the merged Shapefile you are interested in. Holding down Ctrl allows you to add / remove individual sections as well. Once you are satisfied with your selection, right click on the merged Shapefile in the left-hand Layers table, and select *Save selection as* :

!images/gis/10_qgis_save_selection_small.png!:images/gis/10_qgis_save_selection.png

And presto! You should now have a Shapefile of the smaller selection saved on your system. You can open it back up with Quantum GIS, but for the rest of the tutorial, we will be done with this application.

h3. Simplifying a Shapefile

To reduce size further, you might want to simplify your Shapefile. This looks to be possible in Quantum GIS, but I wanted to try out "MapShaper":http://mapshaper.org/ which is recommended in the D3 documentation. Click launch, and upload the .shp file from the output of your Quantum GIS work.

I don't have a good idea of how simplified you can go, but for Census Tract Shapefiles, I didn't see much degradation even at 50% simplification level. When happy, click *export* in the upper right-hand corner and choose *Shapefile - polygons*. Download the two resulting files.

<div class="box">
*NOTE* 
For the next step, we want to maintain the 'properties' section populated by data from the Shapefiles. Do ensure this section isn't empty, *replace* your .shp and .shx files with these simplified versions, and don't remove the rest of the files. This is to say delete your original .shp / .shx files and rename these simplified versions to match your old ones. Let me know if that doesn't make sense.
</div>

h3. Converting to geoJSON using GDAL

Transfer these files to your Mac / Linux machine. You should have a folder with all the Shapefile files. Now we want to create a geoJSON file for D3 to use from these files. Using the @ogr2ogr@ command to do this is pretty straightforward. It would look something like:

<pre class="terminal"><code>ogr2ogr -f geoJSON kc.json kc.shp</code></pre>

Note that the output file name comes *before* the input file name.

You should now have a geoJSON file of your custom Census Tract section, ready to be used in D3.

"Here is my KC Metro geoJSON file":https://github.com/vlandham/vlandham.github.com/blob/master/vis/data/kc-tracts.json . You can see that the *properties* object maintains the information necessary to map the geoJSON feature back to a Census Tract.

h3. Display in D3

Make sure to include @d3.geo.min.js@ in your html file. Below is the minimum amount of code I used to display this geoJSON file using D3 and coffeescript (though it could be easily translated to plain old javascript). This assumes that there is a div with the id of @vis@ in your html.

{% highlight coffeescript %}
xy = d3.geo.albersUsa().translate([-900,950]).scale(28000)
path = d3.geo.path().projection(xy)

vis = d3.select("#vis")
  .append("svg:svg")
  .attr("width", 900)
  .attr("height", 900)

d3.json "data/kc3.json", (json) ->
  vis.append("svg:g")
    .attr("class", "tracts")
  .selectAll("path")
    .data(json.features)
  .enter().append("svg:path")
    .attr("d", path)
    .attr("fill-opacity", 0.5)
    .attr("fill", (d) -> if d.properties["STATEFP10"] == "20" then "#B5D9B9" else "#85C3C0")
    .attr("stroke", "#222")
{% endhighlight %}

You can see there is an arbitrary translation and scaling involved with the projection. This was done to zoom in on the region of interest. I am not sure what a better way to this would be. Any ideas / suggestions? Some idea of where to start with these values was provided by the "Azimuthal Projection Toy":http://enja.org/advd3/azimuthal/azimuthal.html from "Ian Johnson":http://enja.org/about/ .

I also use the "STATEFP10" property of each tract to determine the fill color. This results in different colors for Kansas and Missouri. Here's an image of the result:

!images/gis/kc_tracts_small.png!:images/gis/kc_tracts.png

Again, perhaps not the smoothest way to get this geoJSON file, but perhaps a starting point for others. Let me know if there are better / different ways to accomplish this.

From "this d3 user group discussion":http://groups.google.com/group/d3-js/browse_thread/thread/e0243bb66a438be1 I understand "leaflet":http://leaflet.cloudmade.com/ , "openlayers":http://openlayers.org/ , and the rest of the tile-based map solutions are out there. But they don't really solve the problem of getting Shapefile data small enough and in a format to be used by D3. Or do they?
